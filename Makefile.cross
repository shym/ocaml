#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*                          Samuel Hym, Tarides                           *
#*                                                                        *
#*   Copyright 2024 Tarides                                               *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# Recipes to build a cross-compiler (_not_ cross-compiling the compiler), aka
# generating code that will run on `target`, assuming that an OCaml compiler of
# the same version and targetting our build machine is available in $PATH

NO_ZSTD=libcomprmarsh_OBJECTS=
# FIXME PoC only that the flags should be extracted from the straight compiler
# configuration
NATIVE_ZSTD_LIBS := ZSTD_LIBS="$(filter -lzstd,$(shell ocamlopt -config))"

CROSS_OVERRIDES=OCAMLRUN=ocamlrun NEW_OCAMLRUN=ocamlrun \
  BOOT_OCAMLLEX=ocamllex OCAMLYACC=ocamlyacc
CROSS_COMPILER_OVERRIDES=$(CROSS_OVERRIDES) CAMLC=ocamlc CAMLOPT=ocamlopt \
  BEST_OCAMLC=ocamlc BEST_OCAMLOPT=ocamlopt BEST_OCAMLLEX=ocamllex

INSTALL_OVERRIDES=build_ocamldoc=false WITH_DEBUGGER=

# Freestanding target custom options
ifeq "$(SYSTEM)" "none"
RUNTIME_BUILD_OVERRIDES=runtime_PROGRAMS=
INSTALL_OVERRIDES += runtime_PROGRAMS=`which ocamlrun` \
  runtime_BYTECODE_STATIC_LIBRARIES=runtime/ld.conf
else
RUNTIME_BUILD_OVERRIDES=
endif

cross.opt:
	$(MAKE) runtime-all $(NO_ZSTD) $(RUNTIME_BUILD_OVERRIDES)
	$(MAKE) ocamlc ocamlopt $(TOOLS_BYTECODE_TARGETS) expunge \
		$(CROSS_COMPILER_OVERRIDES)
	$(MAKE) library $(CROSS_OVERRIDES)
ifneq "$(SYSTEM)" "none"
	$(MAKE) ocamlyacc $(CROSS_OVERRIDES)
	$(MAKE) ocamllex $(CROSS_COMPILER_OVERRIDES)
endif
	$(MAKE) -C otherlibs all $(CROSS_OVERRIDES)
	# Opt
	$(MAKE) runtimeopt $(NO_ZSTD)
	$(MAKE) ocamlc.opt ocamlopt.opt $(TOOLS_NATIVE_TARGETS) \
		$(NO_ZSTD) $(CROSS_COMPILER_OVERRIDES) $(NATIVE_ZSTD_LIBS)
	$(MAKE) libraryopt $(NO_ZSTD) $(CROSS_OVERRIDES)
	$(MAKE) otherlibrariesopt ocamltoolsopt $(NO_ZSTD) $(CROSS_OVERRIDES)
	$(MAKE) tools-allopt.opt $(NO_ZSTD) $(CROSS_COMPILER_OVERRIDES)

.PHONY: cross-install
cross-install:
	# dummy files
	$(LN) `which ocaml` ocaml$(EXE)
	touch \
	  $(addprefix toplevel/, \
	    $(foreach ext,cmi cmt cmti cmx, \
	      $(addsuffix __dummy__.$(ext),all byte/byt native/nat)) \
	      topstart.cmo topstart.o native/tophooks.cmi)
	$(LN) `which ocamlyacc` yacc/ocamlyacc.opt$(EXE)
	$(LN) `which ocamllex` lex/ocamllex.opt$(EXE)
ifeq "$(SYSTEM)" "none"
	$(LN) `which ocamlyacc` yacc/ocamlyacc$(EXE)
	$(LN) `which ocamllex` lex/ocamllex$(EXE)
endif
	# Real installation
	$(MAKE) install $(INSTALL_OVERRIDES) OCAMLRUN=ocamlrun
