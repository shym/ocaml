name: Cross compilers

on:
  push:
    branches:
      - '4.**'
      - '5.**'
      - 'trunk'
      - android
  pull_request:

# Restrict the GITHUB_TOKEN
permissions: {}

# See build.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'pull_request' || github.sha }}
  cancel-in-progress: true

env:
  TESTDIR: >-
    C:\Бактріан🐫
  STR_UTF8: >-
    "C:\\Бактріан🐫"
  STR_UTF16: >-
    L"C:\\\x0411\x0430\x043a\x0442\x0440\x0456\x0430\x043d\xd83d\xdc2b"
  STR_UTF8_ENC: >-
    "C:\\\xd0\x91\xd0\xb0\xd0\xba\xd1\x82\xd1\x80\xd1\x96\xd0\xb0\xd0\xbd\xf0\x9f\x90\xab"

jobs:
  non-cross-compiler:
    runs-on: ubuntu-latest
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            /tmp/ocaml.tar.zst
          key: non-cross-compiler
      - name: Checkout OCaml
        uses: actions/checkout@v4
        with:
          persist-credentials: false
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Configure, build and install OCaml
        run: |
          PREFIX="$HOME/.local"
          echo "$PREFIX/bin" >> "$GITHUB_PATH"
          set -x
          if ! ./configure --disable-warn-error --disable-ocamldoc \
                   --disable-ocamltest --disable-stdlib-manpages \
                   --disable-dependency-generation --prefix="$PREFIX" ; then
            cat config.log
            exit 1
          fi
          make -j
          make install
          cd "$HOME"
          tar caf /tmp/ocaml.tar.zst .local
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: |
            /tmp/ocaml.tar.zst
          key: non-cross-compiler
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: non-cross-ocaml
          path: /tmp/ocaml.tar.zst
          retention-days: 1

  cross-compiler-to-android:
    runs-on: ubuntu-latest
    needs: non-cross-compiler
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: non-cross-ocaml
      - name: Install non-cross OCaml and set up environment
        run: |
          set -x
          pwd
          tar xaf ocaml.tar.zst -C "$HOME"
          rm -f ocaml.tar.zst
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          sudo apt-get install -y clang
      - name: Restore cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            /home/runner/android
          key: android-ndk
      - name: Download the Android NDK
        run: |
          set -x
          pwd
          mkdir -p "$HOME/android"
          cd "$HOME/android"
          wget https://dl.google.com/android/repository/android-ndk-r27b-linux.zip
          unzip android-ndk-r27b-linux.zip
          rm android-ndk-r27b-linux.zip
          find . -ls
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: |
            /home/runner/android
          key: android-ndk
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Checkout OCaml
        uses: actions/checkout@v4
        with:
          submodules: true
          persist-credentials: false
      - name: Configure, build and install Linux-to-Android OCaml
        run: |
          D="$HOME/android/android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          T=aarch64-linux-android21
          set -x
          if ! ./configure --prefix="$HOME/cross" --target=$T \
                   CC="$D/clang --target=$T" \
                   AR="$D/llvm-ar" \
                   LD="$D/ld" \
                   RANLIB="$D/llvm-ranlib" \
                   STRIP="$D/llvm-strip" ; then
            cat config.log
            exit 1
          else
            cat config.log
          fi
          make crossopt -j
          make installcross
      - name: Show opt.opt configuration
        run: |
          $HOME/cross/bin/ocamlopt.opt -config
      - name: Cross compile a small program
        run: |
          echo 'let _ =
            Printf.printf "Version: %s\nOS: %s\nUnix: %b\nWin: %b\nCygwin: %b\n"
              Sys.ocaml_version Sys.os_type Sys.unix Sys.win32 Sys.cygwin' \
            > example.ml
          set -x
          cat example.ml
          $HOME/cross/bin/ocamlopt.opt example.ml -o example -verbose
